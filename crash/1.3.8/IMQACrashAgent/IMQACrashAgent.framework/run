#!/bin/sh
#
# Copyright (C) 2018 Onycom Inc. All rights reserved.
#

echoMessageAndExitWithCode() {
echo "${1}"
exit ${2}
}

rawurlencode() {
local string="${1}"
local strlen=${#string}
local encoded=""

for (( pos=0 ; pos<strlen ; pos++ )); do
c=${string:$pos:1}
case "$c" in
[-_.~a-zA-Z0-9] ) o="${c}" ;;
* )               printf -v o '%%%02x' "'$c"
esac
encoded+="${o}"
done
echo "${encoded}"
}

uploadDsym() {

local dsym_path="${1}"

NOW=$(date +"%T")
echo "Time ${NOW}. Started uploading dSYM to IMQA Processor. URL: ${DSYM_UPLOAD_URL}..."

find "${dsym_path}/Contents/Resources/DWARF" -type f -name \* -print |
while read dsym_file; do
HTTP_STATUS=$(curl -X POST https://account.imqa.io/api/upload/dsym -H "content-type: multipart/form-data" -F "pack_name=${PRODUCT_BUNDLE_IDENTIFIER}" -F "app_version=${BUNDLE_SHORT_VERSION}" -F "build_version=${BUNDLE_VERSION}" -F "file_dir=@${dsym_file}" )
echo "${HTTP_STATUS}"
done

CURL_STATUS=$?
NOW=$(date +"%T")

echo "Time ${NOW}. Upload attempt completed. curl return code: ${CURL_STATUS}"
}

checkUploadStatus() {

if [ $HTTP_STATUS -ne 200 -o $CURL_STATUS -ne 0 ]; then
if [ $ADRUM_TREAT_UPLOAD_FAILURES_AS_ERRORS -eq 1 ]; then
MESSAGE=$(printf "error: dSYM archive upload failed\nTo ignore this condition and build succesfully")
echoMessageAndExitWithCode "${MESSAGE}" 1
fi
echo "warning: dSYM archive upload failed"
fi
echo "dSYM uploaded successfully to IMQA Processor"
}

echo "Uploading dSYM to IMQA Processor"
echo ""

BUNDLE_VERSION=$(/usr/libexec/PlistBuddy -c 'Print CFBundleVersion' ${INFOPLIST_FILE})
BUNDLE_SHORT_VERSION=$(/usr/libexec/PlistBuddy -c 'Print CFBundleShortVersionString' ${INFOPLIST_FILE})

echo "Product Bundle Identifier: ${PRODUCT_BUNDLE_IDENTIFIER}"
echo "Product Version: ${BUNDLE_SHORT_VERSION}"
echo "Product Build: ${BUNDLE_VERSION}"

APP_DSYM=${DWARF_DSYM_FOLDER_PATH}/${DWARF_DSYM_FILE_NAME}

# Check if App dSym file exists
echo "App dSYM file location: ${APP_DSYM}"
if [ ! -d "$APP_DSYM" ]; then
echoMessageAndExitWithCode "error: App dSYM file not found at: ${APP_DSYM}" 1
fi

DSYM_UPLOAD_URL="https://account.imqa.io/api/upload/dsym"

find ${DWARF_DSYM_FOLDER_PATH} -type d -name \*.dSYM -print |
while read dsym; do
uploadDsym "${dsym}"
checkUploadStatus
done

code_sign() {
# Use the current code_sign_identitiy
echo "Code Signing $1 with Identity ${EXPANDED_CODE_SIGN_IDENTITY_NAME}"
echo "/usr/bin/codesign --force --sign ${EXPANDED_CODE_SIGN_IDENTITY} --preserve-metadata=identifier,entitlements $1"
/usr/bin/codesign --force --sign ${EXPANDED_CODE_SIGN_IDENTITY} --preserve-metadata=identifier,entitlements "$1"
}

# Set working directory to productâ€™s embedded frameworks
cd "${BUILT_PRODUCTS_DIR}/${FRAMEWORKS_FOLDER_PATH}"

if [ "$ACTION" = "install" ]; then
echo "Copy .bcsymbolmap files to .xcarchive"
find . -name '*.bcsymbolmap' -type f -exec mv {} "${CONFIGURATION_BUILD_DIR}" \;
else
# Delete *.bcsymbolmap files from framework bundle unless archiving
find . -name '*.bcsymbolmap' -type f -exec rm -rf "{}" +\;
fi

echo "Stripping frameworks"

for file in $(find . -type f -perm +111); do
# Skip non-dynamic libraries
if ! [[ "$(file "$file")" == *"dynamically linked shared library"* ]]; then
continue
fi
# Get architectures for current file
archs="$(lipo -info "${file}" | rev | cut -d ':' -f1 | rev)"
stripped=""
for arch in $archs; do
if ! [[ "${VALID_ARCHS}" == *"$arch"* ]]; then
# Strip non-valid architectures in-place
lipo -remove "$arch" -output "$file" "$file" || exit 1
stripped="$stripped $arch"
fi
done
if [[ "$stripped" != "" ]]; then
echo "Stripped $file of architectures:$stripped"
if [ "${CODE_SIGNING_REQUIRED}" == "YES" ]; then
code_sign "${file}"
fi
fi
done
